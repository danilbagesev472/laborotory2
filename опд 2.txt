1.1-1 Велосипедист движется равномерно и прямолинейно со скоростью v м/с . 
Написать программу, вычисляющую время в минутах, за которое он пройдёт s км.

#include <iostream>
using namespace std;
int main ()
{
double t, s, v;
cin >> s >> v;
t = s / v;
cout << t;
}




1.2-1 Дан треугольник со сторонами a, b и c. 
Написать программу, вычисляющую угол между сторонами a и b.

#include <iostream>
#include <cmath>
using namespace std;
int main ()
{
int a, b, c, u;
double      cos(      double a );
cin >> a >> b >> c;
u = a^2+b^2-c^2/2*a*c;
cout << "u=:" << u;
}




1.4-1 Даны числа a, b и c. 
Написать программу, вычисляющее их среднее гармоническое g = 3/1/a + 1/b + 1/c . 
Ответ вывести в виде: «Среднее гармоническое чисел a, b и c равно g.». 
Вместо буквенных обозначений должны стоять до 2-го знака после запятой. 
Перед запросом ввода с клавиатуры выводить подсказку.

#include <iostream>
using namespace std;
int main()
{
double a , b ,c, g;
cin >> a >> b >> c;
g = 3/1/a + 1/b + 1/c;
printf("%.2f\n", g);
}




3.1-1 Последовательность чисел a[0] , a[1] , a[2] … Образуется по закону: 
Написать программу , вычесляющую an для номера [n] .
#include <iostream>
using namespace std;
int main()
{
float a[50]; //максимально кол-во(можно больше)
a[0] = 1;
int n, k; 
cout << "n = "; cin >> n; //вывод и ввод 
cout << "a[0] = " << a[0]; 
for (int k = 1; k <= n; k++) //цикл for. int - целые числа 
{
a[k] =(( k * a[k - 1]) + (1 / k));
printf("a[%i] = %f\n", k, a[k]); //%f - Дробное число в фиксированном формате =>
printf("%.1f\n"); //%.1 - это сколько чисел после запятой. \n для удобства, чтобы не писать endl
}



3.2-1 Дано действительное число a. 
Написать программу такое наименьшее число n , что 1+1/2=1/3+…+a/n>a
#include <iostream>
using namespace std;
int main()
{
int a;
cout << "N = "; cin >> a;
double ez = 1.0;
for (int i = 1; i <= a; i++)
{
ez += 1.0 / i; //чтобы не получался н0ль
}
printf("Ответ: %.1f\n", ez);
}
